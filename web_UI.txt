Employee.Ui project file 


EmployeeController.cs 

using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using  emp=Employee.UI.Models;

namespace Employee.UI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmployeeController : Controller
    {
        private static List<emp.Employee> Employees = new List<emp.Employee>
        {
            new emp.Employee { Id = 1, Name = "John Doe", Age = 30, Profession = "Developer" },
            new emp.Employee { Id = 2, Name = "Jane Doe", Age = 25, Profession = "Designer" }
        };

      
        [HttpGet]
        public IEnumerable<emp.Employee> Get()
        {
            return Employees;
        }

  
        [HttpGet("{id}", Name = "Get")]
        public emp.Employee Get(int id)
        {
            return Employees.FirstOrDefault(e => e.Id == id);
        }

       
        [HttpPost]
        public JsonResult Post([FromBody] emp.Employee Employee)
        {
       
            Employees.Add(Employee);
            return Json("emp.Employee added successfully!");
        }

        [HttpPut("{id}")]
        public JsonResult Put(int id, [FromBody] emp.Employee Employee)
        {
            var existingEmployee = Employees.FirstOrDefault(e => e.Id == id);
            if (existingEmployee != null)
            {
                existingEmployee.Name = Employee.Name;
                existingEmployee.Age = Employee.Age;
                existingEmployee.Profession = Employee.Profession;
                return Json("emp.Employee updated successfully!");
            }

            return Json("emp.Employee not found");
        }

        [HttpDelete("{id}")]
        public JsonResult Delete(int id)
        {
            var existingemp = Employees.FirstOrDefault(e => e.Id == id);
            if (existingemp != null)
            {
                Employees.Remove(existingemp);
                return Json("emp.Employee deleted successfully!");
            }

            return Json("emp.Employee not found");
        }
    }
}


Employeeform.js 

$(document).ready(function () {
  
    loadEmployeeList();

  
    $("#btnSubmit").click(function () {
        submitForm();
    });
});

function loadEmployeeList() {
    $.ajax({
        type: "GET",
        url: "http://localhost:5248/api/Employee",
        dataType: "json",
        success: function (employees) {
            var tbody = $("#employeeList tbody");
            tbody.empty();

            employees.forEach(function (employee) {
                var row = "<tr>" +
                    "<td>" + employee.name + "</td>" +
                    "<td>" + employee.age + "</td>" +
                    "<td>" + employee.profession + "</td>" +
                    "<td>" +
                    "<button class='btn btn-primary' onclick='editEmployee(" + employee.Id + ")'>Edit</button> " +
                    "<button class='btn btn-danger' onclick='deleteEmployee(" + employee.Id + ")'>Delete</button>" +
                    "</td>" +
                    "</tr>";
                tbody.append(row);
            });
        },
        error: function (error) {
            console.log(error);
        }
    });
}

function submitForm() {
    var formData = {
        Name: $("#txtName").val(),
        Age: $("#txtAge").val(),
        Profession: $("#txtProfession").val(),
        Id: 0
    };

    $.ajax({
        type: "POST",
        url: "http://localhost:5248/api/Employee",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(formData),
        success: function (response) {
            alert(response);
            clearForm();
            loadEmployeeList(); 
        },
        error: function (error) {
            console.log(error);
        }
    });
}

function editEmployee(id) {
   
    $.ajax({
        type: "GET",
        url: "http://localhost:5248/api/Employee/" + id,
        dataType: "json",
        success: function (employee) {
            $("#txtName").val(employee.Name);
            $("#txtAge").val(employee.Age);
            $("#txtProfession").val(employee.Profession);
            $("#btnSubmit").text("Update");
        },
        error: function (error) {
            console.log(error);
        }
    });
}

function deleteEmployee(id) {
   
    $.ajax({
        type: "DELETE",
        url: "http://localhost:5248/api/Employee/" + id,
        success: function (response) {
            alert(response); 
            loadEmployeeList();
        },
        error: function (error) {
            console.log(error);
        }
    });
}

function clearForm() {
    $("#txtName").val('');
    $("#txtAge").val('');
    $("#txtProfession").val('');
    $("#btnSubmit").text("Submit");
}


Employee.cs 



namespace Employee.UI.Models
{
    public class Employee
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public int Id { get; set; }
        public string Profession { get; set; }
    }

}

index.cshtml

@{
    ViewData["Title"] = "Employee Form";
}

<div>
    <label>Name</label>
    <input id="txtName" type="text" />
    <label>Age</label>
    <input id="txtAge" type="text" />
    <label>Profession</label>
    <input id="txtProfession" type="text" />
    <button type="button" onclick="submitForm()">Submit</button>
</div>

<div id="employeeList">
    <h2>Employee List</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Age</th>
                <th>Profession</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            
        </tbody>
    </table>
</div>

@section scripts{
    <script src="~/js/EmployeeForm.js"></script>
}


 Api Project file 


ProductController.cs 


using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using System.IdentityModel.Tokens.Jwt;

namespace Web_ApiProject.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class ProductController : ControllerBase
    {
        private static List<Product> _products = new List<Product>
        {
            new Product { Id = 1, Name = "Product 1", Price = 10.99M },
            new Product { Id = 2, Name = "Product 2", Price = 20.99M },
            new Product { Id = 3, Name = "Product 3", Price = 30.99M }
        };

        private readonly ILogger<ProductController> _logger;
        private readonly IConfiguration _configuration;

        public ProductController(ILogger<ProductController> logger, IConfiguration configuration)
        {
            _logger = logger;
            _configuration = configuration;
        }

        [HttpGet]
        public IActionResult Get()
        {
            return Ok(_products);
        }

        [HttpGet("{id}")]
        public IActionResult Get(int id)
        {
            var product = _products.FirstOrDefault(p => p.Id == id);
            if (product == null)
            {
                return NotFound();
            }
            return Ok(product);
        }

        [HttpPost]
        public IActionResult Post([FromBody] Product product)
        {
            if (product == null)
            {
                return BadRequest("Invalid product data.");
            }
            product.Id = GetNextProductId();
            _products.Add(product);
            return CreatedAtAction(nameof(Get), new { id = product.Id }, product);
        }

        [HttpPut("{id}")]
        public IActionResult Put(int id, [FromBody] Product product)
        {
            if (product == null)
            {
                return BadRequest("Invalid product data.");
            }
            var existingProduct = _products.FirstOrDefault(p => p.Id == id);
            if (existingProduct == null)
            {
                return NotFound();
            }
            existingProduct.Name = product.Name;
            existingProduct.Price = product.Price;
            return NoContent();
        }

        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var product = _products.FirstOrDefault(p => p.Id == id);
            if (product == null)
            {
                return NotFound();
            }
            _products.Remove(product);
            return NoContent();
        }

        [HttpPost("login")] // New action for generating JWT token
        [AllowAnonymous]
        public IActionResult Login()
        {
            var token = GenerateJwtToken();
            _logger.LogInformation($"Generated token: {token}");
            return Ok(new { Token = token });
        }

        private string GenerateJwtToken()
        {
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                expires: DateTime.Now.AddMinutes(30), // Token expiration time
                signingCredentials: credentials
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }

        private int GetNextProductId()
        {
            return _products.Max(p => p.Id) + 1;
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
    }
}


Product.cs 

namespace ParasNewAPI.Model
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
    }
}


Program.cs 

using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();

// Add JWT authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
    };
});

// Add Swagger
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Jwt_Token_Auth_Api",
        Version = "v1"
    });
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Here Enter JWT Token with bearer format like bearer[space] token"

    }) ;
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[]{ }
        }
    });
});

builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", builder =>
   {
       builder.AllowAnyOrigin()
       .AllowAnyHeader()
       .AllowAnyMethod();

   });
});


var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "Your API v1"));
}

app.UseHttpsRedirection();

app.UseRouting();

app.UseAuthentication(); // Add this line before app.UseAuthorization();

app.UseAuthorization();

app.UseCors("AllowAll");

app.MapControllers();

app.Run();



just listen there are two project one is MVC project another one is web api project this project is for crud operation in this project we want to make project as UI part is seprate and api part is seprate and project only for employee  data as name age profession on index page inserted data will be shown there we are not using sql we want to create this project only using gridview and data will be shown in table form so please remove all the code which is not usable according to my project so please remove code and generate code with there file name 