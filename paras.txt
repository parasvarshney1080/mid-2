login.js 




function Adminlogin() {
    var username = $('#username').val();
    var password = $('#password').val();


    $.ajax({
        url: 'https://localhost:7102/api/product/login',
        method: 'POST',

        
        contentType: 'application/json',
        data: JSON.stringify({
            Username: username,
            Password: password
        }),
        success: function (data) {
            if (data.token != "") {

                document.cookie = 'jwtToken=${data.token}; path=/';

                // document.cookie = data.token
                createCookie("user", data.token, 1)

                //alert('Login successful!');
                window.location.href = '/Home/Index';
            }
            else
            {
                alert('Invalid credentials. please try again');
            }
        },
        error: function (error) {
            console.error('Error logging in:', error);
            alert('Invalid credentials. please try again');

        }
    })

}
function createCookie(name, value, days) {
    var expires;

    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
    } else {
        expires = "";
    }
    document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + "; path=/";
}

function readCookie(name) {
    var nameEQ = encodeURIComponent(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ')
            c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0)
            return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
    return null;
}

function eraseCookie(name) {
    createCookie(name, "", -1);
}


product.js 

$(document).ready(function () {
    // Call getProducts when the page is ready
    getProducts();

    // Function to get products and populate the list
   

    $('#saveButton').click(function () {
        createProduct();
    })

    // Function to create a product
   
});

function getProducts() {
    $.ajax({
        url: 'https://localhost:7102/api/product',
        method: 'GET',
        headers: {
            'Authorization': 'bearer ' + jwtToken
        },
        success: function (data) {
            var productList = $('#productList tbody');
            productList.empty(); // Clear existing data

            $.each(data, function (index, product) {
                productList.append(`
                        <tr>
                            <td>${product.id}</td>
                            <td>${product.name}</td>
                            <td>${product.price}</td>
                        </tr>
                    `);
            });
        },
        error: function (error) {
            console.error('Error fetching products:', error);
        }
    });
}
function createProduct() {
    var productName = $('#productName').val();
    var productPrice = $('#productPrice').val();

    console.log('productName: ', productName);
    console.log('producPrice: ', productPrice);



    $.ajax({
        url: 'https://localhost:7102/api/Product',
        method: 'POST',
        headers: {
            'Authorization': 'Bearer ' + jwtToken
        },
        contentType: 'application/json',
        data: JSON.stringify({
            Name: productName,
            Price: productPrice
        }),
        success: function (data) {
            alert('Product created successfully!');
            $('#productName').val('');
            $('#productPrice').val('');
            getProducts(); // Refresh the product list after creating
        },
        error: function (error) {
            console.error('Error creating product:', error);
        }
    });
}




productController.cs 




function Adminlogin() {
    var username = $('#username').val();
    var password = $('#password').val();


    $.ajax({
        url: 'https://localhost:7102/api/product/login',
        method: 'POST',

        
        contentType: 'application/json',
        data: JSON.stringify({
            Username: username,
            Password: password
        }),
        success: function (data) {
            if (data.token != "") {

                document.cookie = 'jwtToken=${data.token}; path=/';

                // document.cookie = data.token
                createCookie("user", data.token, 1)

                //alert('Login successful!');
                window.location.href = '/Home/Index';
            }
            else
            {
                alert('Invalid credentials. please try again');
            }
        },
        error: function (error) {
            console.error('Error logging in:', error);
            alert('Invalid credentials. please try again');

        }
    })

}
function createCookie(name, value, days) {
    var expires;

    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
    } else {
        expires = "";
    }
    document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + "; path=/";
}

function readCookie(name) {
    var nameEQ = encodeURIComponent(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ')
            c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0)
            return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
    return null;
}

function eraseCookie(name) {
    createCookie(name, "", -1);
}


HomeController.cs 


using Microsoft.AspNetCore.Mvc;
using Product_UI.Models;
using System.Diagnostics;

namespace Product_UI.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            var jwtToken = Request.Cookies["user"];
            if(string.IsNullOrEmpty(jwtToken))
            
            {
                return RedirectToAction("Login", "Home");
            }
            return View();

        }

        public IActionResult Privacy()
        {
            return View();
        }

        public IActionResult Login()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}


Uncaught ReferenceError: readcookie is not defined
    at getProducts (product.js:18:20)
    at HTMLDocument.<anonymous> (product.js:3:5)
    at e (jquery.min.js:2:30005)
    at t (jquery.min.js:2:30307)
getProducts @ product.js:18
(anonymous) @ product.js:3
e @ jquery.min.js:2
t @ jquery.min.js:2
setTimeout (async)
S.readyException @ jquery.min.js:2
(anonymous) @ jquery.min.js:2
e @ jquery.min.js:2
t @ jquery.min.js:2
setTimeout (async)
(anonymous) @ jquery.min.js:2
c @ jquery.min.js:2
fireWith @ jquery.min.js:2
fire @ jquery.min.js:2
c @ jquery.min.js:2
fireWith @ jquery.min.js:2
t @ jquery.min.js:2
setTimeout (async)
(anonymous) @ jquery.min.js:2
c @ jquery.min.js:2
fireWith @ jquery.min.js:2
fire @ jquery.min.js:2
c @ jquery.min.js:2
fireWith @ jquery.min.js:2
ready @ jquery.min.js:2
B @ jquery.min.js:2
:7095/favicon.ico:1     Failed to load resource: the server responded with a status of 404 ()


