ProductController.cs 


using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using System.IdentityModel.Tokens.Jwt;

namespace Web_ApiProject.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class ProductController : ControllerBase
    {
        private static  List<Product> _products = new List<Product>
        {
            new Product { Id = 1, Name = "Product 1", Price = 10.99M },
            new Product { Id = 2, Name = "Product 2", Price = 20.99M },
            new Product { Id = 3, Name = "Product 3", Price = 30.99M }
        };

        private readonly ILogger<ProductController> _logger;
        private readonly IConfiguration _configuration;

        public ProductController(ILogger<ProductController> logger, IConfiguration configuration)
        {
            _logger = logger;
            _configuration = configuration;
        }

        [HttpGet]
        public IActionResult Get()
        {
            return Ok(_products);
        }

        [HttpGet("{id}")]
        public IActionResult Get(int id)
        {
            var product = _products.FirstOrDefault(p => p.Id == id);
            if (product == null)
            {
                return NotFound();
            }
            return Ok(product);
        }

        [HttpPost]
        public IActionResult Post([FromBody] Product product)
        {
            if (product == null)
            {
                return BadRequest("Invalid product data.");
            }
            product.Id = GetNextProductId();
            _products.Add(product);
            return CreatedAtAction(nameof(Get), new { id = product.Id }, product);
        }

        [HttpPut("{id}")]
        public IActionResult Put(int id, [FromBody] Product product)
        {
            if (product == null)
            {
                return BadRequest("Invalid product data.");
            }
            var existingProduct = _products.FirstOrDefault(p => p.Id == id);
            if (existingProduct == null)
            {
                return NotFound();
            }
            existingProduct.Name = product.Name;
            existingProduct.Price = product.Price;
            return NoContent();
        }

        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var product = _products.FirstOrDefault(p => p.Id == id);
            if (product == null)
            {
                return NotFound();
            }
            _products.Remove(product);
            return NoContent();
        }

        [HttpPost("login")] // New action for generating JWT token
        [AllowAnonymous]
        public IActionResult Login([FromBody] LoginRequest loginRequest)
        {
            if(AuthenticateUser(loginRequest.Username , loginRequest.Password))
            {
                var token = GenerateJwtToken();
                _logger.LogInformation($"Generated token: {token}");
                return Ok(new { Token = token });
            }

            return Unauthorized();
           
        }

        private bool AuthenticateUser(string username, string password)
        {
            const string validUsername = "paras";
            const string validPassword = "12345678";

            return username == validUsername && password == validPassword;
        }

        private string GenerateJwtToken()
        {
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                expires: DateTime.Now.AddMinutes(30), // Token expiration time
                signingCredentials: credentials
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }

        private int GetNextProductId()
        {
            return _products.Max(p => p.Id) + 1;
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
    }

    public class LoginRequest
    {
        public string Username { get; set; }
        public String Password { get; set; }
    }
}


AppDbContext.cs 


using Microsoft.EntityFrameworkCore;
namespace Product_Api.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
        {

        }

        public DbSet<Product> Products { get; set; }
    }
}


product.cs 


namespace Product_Api.Models
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
    }
}


HomeController.cs 


using Microsoft.AspNetCore.Mvc;
using Product_UI.Models;
using System.Diagnostics;
using System.Collections.Generic;
using System.Net.Http;

namespace Product_UI.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            var jwtToken = Request.Cookies["user"];
            if(string.IsNullOrEmpty(jwtToken))
            
            {
                return RedirectToAction("Login", "Home");
            }
            //List<Product> products = GetProductFromApi();
            //ViewBag.Products = products;
            return View();

        }


        private List<Product> GetProductFromApi()
        {
            List<Product> products = new List<Product>();

            try
            {
                using (HttpClient client = new HttpClient())
                {
                    client.BaseAddress = new Uri("https://localhost:7102/api/product");

                    HttpResponseMessage response = client.GetAsync("api/Product").Result;

                    if (response.IsSuccessStatusCode)
                    {
                        products = response.Content.ReadAsAsync<List<Product>>().Result;
                    }
                }
            }
            catch (Exception ex)
            {
                
                _logger.LogError(ex, "Error fetching products from API");
            }

            return products;
        }



        public IActionResult Privacy()
        {
            return View();
        }

        public IActionResult Login()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
    }

}


login.js 




function Adminlogin() {
    var username = $('#username').val();
    var password = $('#password').val();


    $.ajax({
        url: 'https://localhost:7102/api/product/login',
        method: 'POST',


        contentType: 'application/json',
        data: JSON.stringify({
            Username: username,
            Password: password
        }),
        success: function (data) {
            if (data.token) {

                document.cookie = 'jwtToken=${data.token}; path=/';

                // document.cookie = data.token
                createCookie("user", data.token, 1)



                //alert('Login successful!');
                window.location.href = '/Home/Index';
            }
            else {
                alert('Invalid credentials. please try again');
            }
        },
        error: function (error) {
            console.error('Error logging in:', error);
            alert('Invalid credentials. please try again');

        }
    });

}
function createCookie(name, value, days) {
    var expires;

    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
    } else {
        expires = "";
    }
    document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + "; path=/";
}

function readCookie(name) {
    var nameEQ = encodeURIComponent(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ')
            c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0)
            return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
    return null;
}

function eraseCookie(name) {
    createCookie(name, "", -1);
}


product.js 


$(document).ready(function ()
{
    // Call getProducts when the page is ready
    getProducts();

    // Function to get products and populate the list
   

    $('#saveButton').click(function () {
        createProduct();
    })

    // Function to create a product
   
});

function getProducts()
{

    var jwtToken = readCookie('user');

    
    $.ajax({
        url: 'https://localhost:7102/api/product',
        method: 'GET',
        headers: {
            'Authorization': 'bearer ' + jwtToken
        },
        success: function (data) {
            var productList = $('#productList tbody');
            productList.empty(); // Clear existing data

            $.each(data, function (index, product) {
                productList.append(`
                        <tr>
                            <td>${product.id}</td>
                            <td>${product.name}</td>
                            <td>${product.price}</td>
                        <td>
                            <button class="btn btn-danger" onclick="deleteProduct(${product.id})">Delete</button>
                        </td>
                        </tr>
                    `);
            });
        },
        error: function (error) {
            console.error('Error fetching products:', error);
        }
    });
}
function createProduct()
{
    var productName = $('#productName').val();
    var productPrice = $('#productPrice').val();

    console.log('productName: ', productName);
    console.log('producPrice: ', productPrice);

    var jwtToken = readCookie('user');

    $.ajax({
        url: 'https://localhost:7102/api/Product',
        method: 'POST',
        headers: {
            'Authorization': 'Bearer ' + jwtToken
        },
        contentType: 'application/json',
        data: JSON.stringify({
            Name: productName,
            Price: productPrice
        }),
        success: function (data) {
            alert('Product created successfully!');
            $('#productName').val('');
            $('#productPrice').val('');
            getProducts(); // Refresh the product list after creating
        },
        error: function (error) {
            console.error('Error creating product:', error);
        }
    });
}

function deleteProduct(productId) {
    var jwtToken = readCookie('user');

    $.ajax({
        url: `https://localhost:7102/api/Product/` + productId,
        method: 'DELETE',
        headers: {
            'Authorization': 'Bearer ' + jwtToken
        },
        success: function () {
            alert('Product deleted successfully!');
            getProducts(); // Refresh the product list after deletion
        },
        error: function (error) {
            console.error('Error deleting product:', error);
        }
    });
}


function readCookie(name) {
    var nameEQ = encodeURIComponent(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ')
            c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0)
            return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
    return null;
}


index.cshtml



    <h2>Product List</h2>

    <div id="productList">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>@("Product ID")</th>
                    <th>@("Name")</th>
                    <th>@("Price")</th>
                    <th>@("Actions")</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>

    <h2>Create Product</h2>

    <div id="createProductForm">
        <div class="form-group">
            <label for="productName">Name</label>
            <input type="text" class="form-control" id="productName">
        </div>
        <div class="form-group">
            <label for="productPrice">Price</label>
            <input type="text" class="form-control" id="productPrice">
        </div>
        <button id ="saveButton" class="btn btn-primary">Save</button>
    </div>
   
    

 
Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0246	The type or namespace name 'Product' could not be found (are you missing a using directive or an assembly reference?)	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Data\AppDbContext.cs	11	Active



