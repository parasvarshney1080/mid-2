ProductController.cs 

using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using System.IdentityModel.Tokens.Jwt;

namespace Web_ApiProject.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize]
    public class ProductController : ControllerBase
    {
        private static List<Product> _products = new List<Product>
        {
            new Product { Id = 1, Name = "Product 1", Price = 10.99M },
            new Product { Id = 2, Name = "Product 2", Price = 20.99M },
            new Product { Id = 3, Name = "Product 3", Price = 30.99M }
        };

        private readonly ILogger<ProductController> _logger;
        private readonly IConfiguration _configuration;

        public ProductController(ILogger<ProductController> logger, IConfiguration configuration)
        {
            _logger = logger;
            _configuration = configuration;
        }

        [HttpGet]
        public IActionResult Get()
        {
            return Ok(_products);
        }

        [HttpGet("{id}")]
        public IActionResult Get(int id)
        {
            var product = _products.FirstOrDefault(p => p.Id == id);
            if (product == null)
            {
                return NotFound();
            }
            return Ok(product);
        }

        [HttpPost]
        public IActionResult Post([FromBody] Product product)
        {
            if (product == null)
            {
                return BadRequest("Invalid product data.");
            }
            product.Id = GetNextProductId();
            _products.Add(product);
            return CreatedAtAction(nameof(Get), new { id = product.Id }, product);
        }

        [HttpPut("{id}")]
        public IActionResult Put(int id, [FromBody] Product product)
        {
            if (product == null)
            {
                return BadRequest("Invalid product data.");
            }
            var existingProduct = _products.FirstOrDefault(p => p.Id == id);
            if (existingProduct == null)
            {
                return NotFound();
            }
            existingProduct.Name = product.Name;
            existingProduct.Price = product.Price;
            return NoContent();
        }

        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            var product = _products.FirstOrDefault(p => p.Id == id);
            if (product == null)
            {
                return NotFound();
            }
            _products.Remove(product);
            return NoContent();
        }

        [HttpPost("login")] // New action for generating JWT token
        [AllowAnonymous]
        public IActionResult Login()
        {
            var token = GenerateJwtToken();
            _logger.LogInformation($"Generated token: {token}");
            return Ok(new { Token = token });
        }

        private string GenerateJwtToken()
        {
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                expires: DateTime.Now.AddMinutes(30), // Token expiration time
                signingCredentials: credentials
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }

        private int GetNextProductId()
        {
            return _products.Max(p => p.Id) + 1;
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
    }
}


Product.cs 

namespace ParasNewAPI.Model
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
    }
}


Program.cs 


using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();

// Add JWT authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = builder.Configuration["Jwt:Issuer"],
        ValidAudience = builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
    };
});

// Add Swagger
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Jwt_Token_Auth_Api",
        Version = "v1"
    });
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Here Enter JWT Token with bearer format like bearer[space] token"

    }) ;
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[]{ }
        }
    });
});

/*builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", builder =>
   {
       builder.AllowAnyOrigin()
       .AllowAnyHeader()
       .AllowAnyMethod();

   });
});*/


var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "Your API v1"));
}

app.UseHttpsRedirection();

app.UseRouting();

app.UseAuthentication(); // Add this line before app.UseAuthorization();

app.UseAuthorization();

//app.UseCors("AllowAll");

app.MapControllers();

app.Run();



Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0234	The type or namespace name 'IdentityModel' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Controllers\ProductController.cs	8	Active


Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0234	The type or namespace name 'IdentityModel' does not exist in the namespace 'System' (are you missing an assembly reference?)	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Controllers\ProductController.cs	10	Active


Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0234	The type or namespace name 'JwtBearer' does not exist in the namespace 'Microsoft.AspNetCore.Authentication' (are you missing an assembly reference?)	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Program.cs	1	Active


Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0234	The type or namespace name 'IdentityModel' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Program.cs	4	Active

Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0246	The type or namespace name 'SymmetricSecurityKey' could not be found (are you missing a using directive or an assembly reference?)	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Controllers\ProductController.cs	104	Active


Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0246	The type or namespace name 'SigningCredentials' could not be found (are you missing a using directive or an assembly reference?)	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Controllers\ProductController.cs	105	Active


Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0103	The name 'SecurityAlgorithms' does not exist in the current context	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Controllers\ProductController.cs	105	Active


Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0246	The type or namespace name 'JwtSecurityToken' could not be found (are you missing a using directive or an assembly reference?)	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Controllers\ProductController.cs	107	Active


Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0246	The type or namespace name 'JwtSecurityTokenHandler' could not be found (are you missing a using directive or an assembly reference?)	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Controllers\ProductController.cs	114	Active


Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0103	The name 'JwtBearerDefaults' does not exist in the current context	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Program.cs	16	Active


Severity	Code	Description	Project	File	Line	Suppression State
Error	CS0103	The name 'JwtBearerDefaults' does not exist in the current context	Product_Api	C:\Users\A0851291\source\repos\Product_Api\Product_Api\Program.cs	17	Active




System.ArgumentNullException
  HResult=0x80004003
  Message=String reference not set to an instance of a String. (Parameter 's')
  Source=System.Private.CoreLib
  StackTrace:
   at System.Text.Encoding.GetBytes(String s)
   at Program.<>c__DisplayClass0_0.<<Main>$>b__1(JwtBearerOptions options) in C:\Users\A0851291\source\repos\Product_Api\Product_Api\Program.cs:line 20
   at Microsoft.Extensions.Options.ConfigureNamedOptions`1.Configure(String name, TOptions options)
   at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)
   at Microsoft.Extensions.Options.OptionsMonitor`1.<>c__DisplayClass10_0.<Get>b__0()
   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)





